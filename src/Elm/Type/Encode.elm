module Elm.Type.Encode exposing (..)

{-| Generated by elm-json-interop.
-}

import Elm.Type as A
import Json.Encode as E
import Utils.Json.Encode_ as E_ exposing (Encoder)


type_ : Encoder A.Type
type_ =
    \v1 ->
        case v1 of
            A.Var v2 ->
                E.object [ ( "_", E.int 0 ), ( "a", E.string v2 ) ]

            A.Lambda v2 v3 ->
                E.object [ ( "_", E.int 1 ), ( "a", type_ v2 ), ( "b", type_ v3 ) ]

            A.Tuple v2 ->
                E.object [ ( "_", E.int 2 ), ( "a", E.list type_ v2 ) ]

            A.Type v2 v3 ->
                E.object [ ( "_", E.int 3 ), ( "a", E.string v2 ), ( "b", E.list type_ v3 ) ]

            A.Record v2 v3 ->
                E.object [ ( "_", E.int 4 ), ( "a", E.list (E_.tuple E.string type_) v2 ), ( "b", E_.maybe E.string v3 ) ]
