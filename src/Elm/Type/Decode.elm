module Elm.Type.Decode exposing (..)

{-| Generated by elm-json-interop.
-}

import Elm.Type as A
import Json.Decode as D exposing (Decoder)
import Utils.Json.Decode_ as D_


type_ : Decoder A.Type
type_ =
    D.field "_" D.int
        |> D.andThen
            (\i___ ->
                case i___ of
                    0 ->
                        D.map A.Var (D.field "a" D.string)

                    1 ->
                        D.map2 A.Lambda (D.field "a" type_) (D.field "b" type_)

                    2 ->
                        D.map A.Tuple (D.field "a" (D.list type_))

                    3 ->
                        D.map2 A.Type (D.field "a" D.string) (D.field "b" (D.list type_))

                    4 ->
                        D.map2 A.Record (D.field "a" (D.list (D_.tuple D.string type_))) (D_.maybeField "b" (D_.maybe D.string))

                    _ ->
                        D.fail ("I can't decode \"Type\", unknown variant with index " ++ String.fromInt i___ ++ ".")
            )
