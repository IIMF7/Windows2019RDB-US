module Database.ModuleGroup.Encode exposing (..)

{-| Generated by elm-json-interop.
-}

import Database.ModuleGroup as A
import Elm.Module.Encode
import Elm.Module.NameDict.Encode
import Elm.Package.Encode
import Json.Encode as E
import Utils.Json.Encode_ as E_ exposing (Encoder)


moduleGroup : Encoder A.ModuleGroup
moduleGroup =
    \v1 ->
        E.object
            [ ( "name"
              , Elm.Module.Encode.name v1.name
              )
            , ( "modules"
              , E.list (E_.tuple Elm.Package.Encode.name Elm.Module.Encode.name) v1.modules
              )
            ]


moduleGroupDict : Encoder A.ModuleGroupDict
moduleGroupDict =
    Elm.Module.NameDict.Encode.nameDict (E.list (E_.tuple Elm.Package.Encode.name Elm.Module.Encode.name))
