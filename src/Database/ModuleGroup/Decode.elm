module Database.ModuleGroup.Decode exposing (..)

{-| Generated by elm-json-interop.
-}

import Database.ModuleGroup as A
import Elm.Module.Decode
import Elm.Module.NameDict.Decode
import Elm.Package.Decode
import Json.Decode as D exposing (Decoder)
import Utils.Json.Decode_ as D_


moduleGroup : Decoder A.ModuleGroup
moduleGroup =
    D.map2
        (\v1 v2 ->
            { name = v1
            , modules = v2
            }
        )
        (D.field "name" Elm.Module.Decode.name)
        (D.field "modules" (D.list (D_.tuple Elm.Package.Decode.name Elm.Module.Decode.name)))


moduleGroupDict : Decoder A.ModuleGroupDict
moduleGroupDict =
    Elm.Module.NameDict.Decode.nameDict (D.list (D_.tuple Elm.Package.Decode.name Elm.Module.Decode.name))
